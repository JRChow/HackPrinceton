#!/usr/bin/python
from __future__ import print_function
import sys, re, bz2
dump = []
items = []
def decode(lines, ind):
	times = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', 'EDT', 'EST']
	global items
	if ind == 0:
		items = populated(lines)
		print(items[0], end = '\t')
		print(times[int(items[1]) - 1], end = ' ')
		print(times[int(items[2]) + 6], end = ' ')
		print(items[3], end = ' ')
		for i in range(3):
			if i != 2:
				print(items[i + 4], end = ':')
			else:
				print(items[i + 4], end = ' ')
		print(times[int(items[7]) + 19], end = ' ')
		print(items[8], end = '\n')
		return 0
	else:
		items[0] = printNum(lines[0][ind], int(items[0]))
		items[1] = printType(lines[1][ind], - 1, int(items[1]), times)
		items[2] = printType(lines[2][ind], + 6, int(items[2]), times)
		items[3] = printReg(lines[3][ind], int(items[3]), "mid")
		for i in range(3):
			items[i + 4] = printTime(lines[i + 4][ind], int(items[i + 4]), i)
		items[7] = printType(lines[7][ind], + 19, int(items[7]), times)
		items[8] = printReg(lines[8][ind], int(items[8]), "end");
		return
def printTime(num, orig, iter):
	if num != ',':
		num = int(num)
		num = num + orig
	if num == ',':
		num = orig
	if num < 10:
		num = '0' + str(num)
	if iter != 2:
		print(num, end = ':')
	else:
		print(num, end = ' ')
	return num
def printNum(num, orig):
	if num != ',':
		num = int(num)
		num = num + orig
	if num == ',':
		num = orig
	if num >= 1000:
		rem = num % 1000
		pre = (num - rem) / 1000
		leading = ''
		if rem/100 == 0:
			leading = '0'
		if rem/10 == 0:
			leading = '00'
		s = '' + str(pre) + ',' + leading + str(rem)
	if num < 1000:
		s = str(num)
	print(s, end = '\t')
	return num
def printType(num, os, orig, kind):
	if num != ',':
		num = int(num)
		num = num + orig
	if num == ',':
		num = orig
	print(kind[num + os], end = ' ')
	return num
def printReg(num, orig, kind):
	if num != ',':
		num = int(num)
		num = num + orig
	if num == ',':
		num = orig
	if kind == 'mid':
		print(num, end = ' ')
	else:
		print(num, end = '\n')
	return num
def populated(lines):
	for num in range(len(lines)):
		items.append(lines[num][0])
	return items
def readFile(file):	
	uncompressedData = bz2.BZ2File(file).read()
	lines = uncompressedData.split(';')
	lines = filter(None, lines)
	for i in range(len(lines)):
		lines[i] = re.split('(,)| ', lines[i])
		lines[i] = filter(None, lines[i])
	for i in range(len(lines[i])):
		decode(lines, i)
	return 0
def main():
	readFile(sys.argv[1])
main()